package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	compute "github.com/WithSoull/in-memory-database/internal/database/compute"
	"github.com/gojuno/minimock/v3"
)

// ComputeLayerMock implements database.computeLayer
type ComputeLayerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcParse          func(s1 string) (q1 compute.Query, err error)
	inspectFuncParse   func(s1 string)
	afterParseCounter  uint64
	beforeParseCounter uint64
	ParseMock          mComputeLayerMockParse
}

// NewComputeLayerMock returns a mock for database.computeLayer
func NewComputeLayerMock(t minimock.Tester) *ComputeLayerMock {
	m := &ComputeLayerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ParseMock = mComputeLayerMockParse{mock: m}
	m.ParseMock.callArgs = []*ComputeLayerMockParseParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mComputeLayerMockParse struct {
	mock               *ComputeLayerMock
	defaultExpectation *ComputeLayerMockParseExpectation
	expectations       []*ComputeLayerMockParseExpectation

	callArgs []*ComputeLayerMockParseParams
	mutex    sync.RWMutex
}

// ComputeLayerMockParseExpectation specifies expectation struct of the computeLayer.Parse
type ComputeLayerMockParseExpectation struct {
	mock    *ComputeLayerMock
	params  *ComputeLayerMockParseParams
	results *ComputeLayerMockParseResults
	Counter uint64
}

// ComputeLayerMockParseParams contains parameters of the computeLayer.Parse
type ComputeLayerMockParseParams struct {
	s1 string
}

// ComputeLayerMockParseResults contains results of the computeLayer.Parse
type ComputeLayerMockParseResults struct {
	q1  compute.Query
	err error
}

// Expect sets up expected params for computeLayer.Parse
func (mmParse *mComputeLayerMockParse) Expect(s1 string) *mComputeLayerMockParse {
	if mmParse.mock.funcParse != nil {
		mmParse.mock.t.Fatalf("ComputeLayerMock.Parse mock is already set by Set")
	}

	if mmParse.defaultExpectation == nil {
		mmParse.defaultExpectation = &ComputeLayerMockParseExpectation{}
	}

	mmParse.defaultExpectation.params = &ComputeLayerMockParseParams{s1}
	for _, e := range mmParse.expectations {
		if minimock.Equal(e.params, mmParse.defaultExpectation.params) {
			mmParse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmParse.defaultExpectation.params)
		}
	}

	return mmParse
}

// Inspect accepts an inspector function that has same arguments as the computeLayer.Parse
func (mmParse *mComputeLayerMockParse) Inspect(f func(s1 string)) *mComputeLayerMockParse {
	if mmParse.mock.inspectFuncParse != nil {
		mmParse.mock.t.Fatalf("Inspect function is already set for ComputeLayerMock.Parse")
	}

	mmParse.mock.inspectFuncParse = f

	return mmParse
}

// Return sets up results that will be returned by computeLayer.Parse
func (mmParse *mComputeLayerMockParse) Return(q1 compute.Query, err error) *ComputeLayerMock {
	if mmParse.mock.funcParse != nil {
		mmParse.mock.t.Fatalf("ComputeLayerMock.Parse mock is already set by Set")
	}

	if mmParse.defaultExpectation == nil {
		mmParse.defaultExpectation = &ComputeLayerMockParseExpectation{mock: mmParse.mock}
	}
	mmParse.defaultExpectation.results = &ComputeLayerMockParseResults{q1, err}
	return mmParse.mock
}

// Set uses given function f to mock the computeLayer.Parse method
func (mmParse *mComputeLayerMockParse) Set(f func(s1 string) (q1 compute.Query, err error)) *ComputeLayerMock {
	if mmParse.defaultExpectation != nil {
		mmParse.mock.t.Fatalf("Default expectation is already set for the computeLayer.Parse method")
	}

	if len(mmParse.expectations) > 0 {
		mmParse.mock.t.Fatalf("Some expectations are already set for the computeLayer.Parse method")
	}

	mmParse.mock.funcParse = f
	return mmParse.mock
}

// When sets expectation for the computeLayer.Parse which will trigger the result defined by the following
// Then helper
func (mmParse *mComputeLayerMockParse) When(s1 string) *ComputeLayerMockParseExpectation {
	if mmParse.mock.funcParse != nil {
		mmParse.mock.t.Fatalf("ComputeLayerMock.Parse mock is already set by Set")
	}

	expectation := &ComputeLayerMockParseExpectation{
		mock:   mmParse.mock,
		params: &ComputeLayerMockParseParams{s1},
	}
	mmParse.expectations = append(mmParse.expectations, expectation)
	return expectation
}

// Then sets up computeLayer.Parse return parameters for the expectation previously defined by the When method
func (e *ComputeLayerMockParseExpectation) Then(q1 compute.Query, err error) *ComputeLayerMock {
	e.results = &ComputeLayerMockParseResults{q1, err}
	return e.mock
}

// Parse implements database.computeLayer
func (mmParse *ComputeLayerMock) Parse(s1 string) (q1 compute.Query, err error) {
	mm_atomic.AddUint64(&mmParse.beforeParseCounter, 1)
	defer mm_atomic.AddUint64(&mmParse.afterParseCounter, 1)

	if mmParse.inspectFuncParse != nil {
		mmParse.inspectFuncParse(s1)
	}

	mm_params := ComputeLayerMockParseParams{s1}

	// Record call args
	mmParse.ParseMock.mutex.Lock()
	mmParse.ParseMock.callArgs = append(mmParse.ParseMock.callArgs, &mm_params)
	mmParse.ParseMock.mutex.Unlock()

	for _, e := range mmParse.ParseMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.q1, e.results.err
		}
	}

	if mmParse.ParseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmParse.ParseMock.defaultExpectation.Counter, 1)
		mm_want := mmParse.ParseMock.defaultExpectation.params
		mm_got := ComputeLayerMockParseParams{s1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmParse.t.Errorf("ComputeLayerMock.Parse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmParse.ParseMock.defaultExpectation.results
		if mm_results == nil {
			mmParse.t.Fatal("No results are set for the ComputeLayerMock.Parse")
		}
		return (*mm_results).q1, (*mm_results).err
	}
	if mmParse.funcParse != nil {
		return mmParse.funcParse(s1)
	}
	mmParse.t.Fatalf("Unexpected call to ComputeLayerMock.Parse. %v", s1)
	return
}

// ParseAfterCounter returns a count of finished ComputeLayerMock.Parse invocations
func (mmParse *ComputeLayerMock) ParseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParse.afterParseCounter)
}

// ParseBeforeCounter returns a count of ComputeLayerMock.Parse invocations
func (mmParse *ComputeLayerMock) ParseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParse.beforeParseCounter)
}

// Calls returns a list of arguments used in each call to ComputeLayerMock.Parse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmParse *mComputeLayerMockParse) Calls() []*ComputeLayerMockParseParams {
	mmParse.mutex.RLock()

	argCopy := make([]*ComputeLayerMockParseParams, len(mmParse.callArgs))
	copy(argCopy, mmParse.callArgs)

	mmParse.mutex.RUnlock()

	return argCopy
}

// MinimockParseDone returns true if the count of the Parse invocations corresponds
// the number of defined expectations
func (m *ComputeLayerMock) MinimockParseDone() bool {
	for _, e := range m.ParseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ParseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParse != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		return false
	}
	return true
}

// MinimockParseInspect logs each unmet expectation
func (m *ComputeLayerMock) MinimockParseInspect() {
	for _, e := range m.ParseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ComputeLayerMock.Parse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ParseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		if m.ParseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ComputeLayerMock.Parse")
		} else {
			m.t.Errorf("Expected call to ComputeLayerMock.Parse with params: %#v", *m.ParseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParse != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		m.t.Error("Expected call to ComputeLayerMock.Parse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ComputeLayerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockParseInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ComputeLayerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ComputeLayerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockParseDone()
}
